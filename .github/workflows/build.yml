# 工作流名称
name: Build Android APK

# 工作流触发条件
# 1. 当有代码推送到 main 分支时
# 2. 当有针对 main 分支的 Pull Request 时
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# 定义一个名为 'build' 的任务
jobs:
  build:
    # 指定任务运行的虚拟环境
    runs-on: ubuntu-latest

    # 定义任务的各个步骤
    steps:
      # 步骤1：检出代码
      # 使用官方的 checkout action 来获取仓库的源代码
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 步骤2：设置 Java 环境
      # 该项目需要 Java 11 (与 Gradle 7.5 兼容)
      # 使用 setup-java action 自动配置 JDK 并缓存 Gradle 依赖
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      # 步骤3：为 Gradle Wrapper 添加执行权限
      # 在 Linux/macOS 环境下，需要确保 gradlew 脚本有执行权限
      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      # 步骤4：使用 Gradle 构建 APK
      # 执行 assembleRelease 命令来构建未签名的 Release 版本 APK
      - name: Build with Gradle
        run: ./gradlew assembleRelease
        
      # 步骤5：上传构建产物 (APK)
      # 使用 upload-artifact action 将生成的 APK 文件作为产物上传
      # 这样你就可以在 Actions 页面下载它了
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          # 产物的名称
          name: app-release-unsigned
          # 要上传的文件的路径
          # Release APK 通常生成在这个路径下
          path: app/build/outputs/apk/release/app-release.apk
